@page "/current-game/{id:long}"
@page "/current-game";
@using Matcher.Client.Services;
@using EntitySystem.Client.Services;
@using Matcher.Shared.Domain
@using Matcher.Shared.Models
@using System.Text.RegularExpressions;
@using Group = Matcher.Shared.Domain.Group

@inject GameService _gameService;
@inject GroupService _groupService;
@inject ItemService _itemService;
@inject IRedirectService _redirectService;
@inject IAlertService _alertService;


@if (_game != null)
{
    <PageTitle>Matcher</PageTitle>

    <h1>@_game!.Name</h1>

    @if (!_gameStarted)
    {
        <label>Maximum number of Groups: </label>
        <select @bind="@_maxGroups" id="source-language">

            @for (var i = 2; i <= _groups?.Count; i++)
            {
                <option value=@i>@i</option>
            }
        </select>
        <br/><br/>
        <div class="col-auto">
            <button class="btn btn-success" disabled="@_startDisabled" @onclick="OnStartGameClick">Start game</button>
        </div>
    }

    else
    {
        

        <div align="right"class="col-auto">
            <button class="btn btn-success" @onclick="OnRestartGameClick">Restart game</button>
            <button class="btn btn-success" @onclick="InitializeNewGame">Load New Items</button>
        </div>

        <i>Click on items belonging together.</i>


        <br/>

        @* render unmatched items*@
        @foreach (var item in _gameStatusItems)
        {
            switch (item.Status)
            {
                case 0:
                    ButtonClass = "btn btn-secondary";
                    break;

                case 1:
                    ButtonClass = "btn btn-primary";
                    break;

                case 2:
                    ButtonClass = "btn btn-success";
                    continue;
            }

            @if (@_game.Chemical == true)
            {
                <button style="margin: 5px;" class="@ButtonClass" id="@item.Id" @onclick="() => OnItemClick(item)">@((MarkupString) AddSubscript(item.Value))</button>
            }
            else
            {
                <button style="margin: 5px;" class="@ButtonClass" id="@item.Id" @onclick="() => OnItemClick(item)">@item.Value</button>
            }
        }

        @* render matched items per group *@
        _previousGroupId = 0;
    
        var items = SortItemsByGroup(_gameStatusItems);
        
        @foreach(var item in items)
        {
            @if (_previousGroupId != item.Group.Id && item.Status == 2)
            {
                <br/><hr/>
            }

            @if (item.Status == 2)
            {
                @if (@_game.Chemical == true)
                {
                    <button style="margin:5px;" class="btn btn-success" id="@item.Id">@((MarkupString)AddSubscript(item.Value))</button>
                }
                else 
                {
                    <button style="margin:5px;" class="btn btn-success" id="@item.Id">@item.Value</button>
                }
            }
            _previousGroupId = item.Group.Id;
        }
    }
}

@code
{
    [Parameter]
    public long Id { get; set; }

    private bool _gameStarted;

    private bool _startDisabled = true;

    private int _maxGroups = 3;

    private DateTime _startTime;

    private long _previousGroupId;

    private static readonly Random Random = new Random();

    private List<Item> _gameItems = new();

    private List<ItemStatusModel> _gameStatusItems = new();

    private string ButtonClass { get; set; }

    private Game _game = Index.CurrentGame;

    private List<Group> _groups;

    protected override async Task OnInitializedAsync()
    {
        _game ??= (await _gameService.ListAsync(g => g.Id == Id)).SingleOrDefault();
    
        _gameItems = await _itemService.ListAsync(i => i.Group.Game.Id == _game.Id);
        
        _groups = await _groupService.ListAsync(g => g.Game.Id == _game.Id);

        _startDisabled = false;
    }
    
    protected override async Task OnParametersSetAsync() {}
    
    private void InitializeNewGame()
    {
        var groups = MixItems<Group>(_groups);

        groups = ReduceNumberOfItems<Group>(groups, _maxGroups);

        var items = _gameItems.Where(i => groups.Any(g => g.Id == i.Group.Id)).ToList();
        
        _gameStatusItems.Clear();

        foreach (var item in items) 
        {
            var itemStatus = new ItemStatusModel
            {
                Id = item.Id,
                Group = item.Group,
                Value = item.Value,
                Status = 0
            };

            _gameStatusItems.Add(itemStatus);
        }

        _gameStatusItems = MixItems<ItemStatusModel>(_gameStatusItems);

        _startTime = DateTime.Now;
    }
    
    private void OnStartGameClick()
    {
        _gameStarted = true;

        InitializeNewGame();

        StateHasChanged();
    }

    private void OnRestartGameClick()
    {
        _gameStatusItems.ForEach(i => i.Status = 0);

        StateHasChanged();
    }
    
    private void OnItemClick(ItemStatusModel item)
    {
        SetItemStatus(item);

        RemoveCompletedItems();

        StateHasChanged();
    }

    private List<ItemStatusModel> SortItemsByGroup( List<ItemStatusModel> items)
    {
        items = items.OrderBy(i => i.Id).ToList();
        return items.OrderBy(i => i.Group.Id).ToList();
    }

    void SetItemStatus(ItemStatusModel item)
    {
        switch (item.Status)
        {
            case 0:
                _gameStatusItems.FirstOrDefault(si => si.Id == item.Id)!.Status = 1;
                break;

            case 1:
                _gameStatusItems.FirstOrDefault(si => si.Id == item.Id)!.Status = 0;
                break;
        }
    }

    private void RemoveCompletedItems()
    {
        var selectedItems = _gameStatusItems.Where(s => s.Status == 1).ToList();

        if (selectedItems.Count < 1) return; 

        var firstGroupId = selectedItems.FirstOrDefault()!.Group.Id;

        var itemsInSelectedGroup = _gameStatusItems.Where(s => s.Group.Id == firstGroupId).ToList();

        if ((itemsInSelectedGroup.Any(isg => isg.Status != 1)) || (selectedItems.Any(si => si.Group.Id != firstGroupId))) return;

        foreach (var item in selectedItems)
        {
            item.Status = 2;
        }

        if (IsGameOver()) _alertService.Add(AlertType.Success, $"Game finished in {((DateTime.Now-_startTime).TotalMilliseconds)/1000} s");
    }

    private static List<T> MixItems<T>(IEnumerable<T> items)
    {
        return items.OrderBy(i => Random.Next()).ToList();
    }

    private static List<T> ReduceNumberOfItems<T>(IEnumerable<T> items, int count)
    {
        return items.Take(count).ToList();
    }
    
    private bool IsGameOver()
    {
        return _gameStatusItems.All(s => s.Status == 2);
    }
    
    private Dictionary<string, string> reg = new()
    {
        { @"^([a-zA-Z]+)([0-9]+)([a-zA-Z]+)([0-9]+)$","$1<sub>$2</sub>$3<sub>$4</sub>"},
        { @"^([a-zA-Z]+)([a-zA-Z]+)([0-9]+)$","$1$2<sub>$3</sub>"},
        { @"^([a-zA-Z]+)([0-9]+)([(][a-zA-Z]+)([0-9])([)])([0-9]+)$","$1<sub>$2</sub>$3<sub>$4</sub>$5<sub>$6</sub>"}
    };

    public string AddSubscript(string value)
    {
        foreach (KeyValuePair<string, string> entry in reg)
        {
            var regex = new Regex(entry.Key, RegexOptions.Compiled);

            if (regex.IsMatch(value)) 
            {
                return regex.Replace(value, entry.Value);
            }
        }
        return value;
      }
}