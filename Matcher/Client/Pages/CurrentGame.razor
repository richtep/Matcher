@page "/current-game";
@using Matcher.Shared;
@using Matcher.Client.Services;
@using EntitySystem.Client.Services;

@inject GroupService _groupService;
@inject ItemService _itemService;
@inject IRedirectService _redirectService;

<PageTitle>Matcher</PageTitle>

<h1>@game.Name</h1>


@{previousGroupId=0;}

@foreach (var item in gameStatusItems) 
{
    if (previousGroupId != item.Group.Id && previousGroupId != 0) 
    {
        <br />
    }

    if (item.Status == 2) 
    {
        <button style="margin:5px;" class="btn btn-success" id=@item.Id>@item.Value</button>
    }

    previousGroupId = item.Group.Id;
}

<hr />
@foreach (var item in gameStatusItemsMixed)
    {
        switch (item.Status)
            {
                case 0:
                    buttonclass = "btn btn-secondary";
                    break;

                case 1:
                    buttonclass = "btn btn-primary"; 
                    break;

                case 2:
                    buttonclass = "btn btn-success";
                    continue;
                
                default:
                    break;
            }

        <button style="margin:5px;" class="@buttonclass" id=@item.Id @onclick="() => OnItemClick(item)">@item.Value</button>
    }


@code
{
    private long previousGroupId;

    private static Random random = new Random();

    private List<Group> gameGroups = new();

    private List<Item> gameItems = new();

    private List<ItemStatus> gameStatusItems = new();

    private List<ItemStatus> gameStatusItemsMixed = new();

    private string buttonclass { get; set; }

    private Game game = Index.CurrentGame;


    protected override async Task OnParametersSetAsync()
    {
        gameGroups = await _groupService.ListAsync(g => g.Game.Id == game.Id);

        foreach (var gameGroup in gameGroups) 
        {
            var gameItemsInGroup = await _itemService.ListAsync(i => i.Group.Id == gameGroup.Id);

            gameItems = gameItemsInGroup.Concat(gameItems).ToList();
        }

        foreach (var item in gameItems) 
        {
            var itemStatus = new ItemStatus
                {
                    Id = item.Id,
                    Group = item.Group,
                    Value = item.Value,
                    Status = 0
                };

            gameStatusItems.Add(itemStatus);
        }

        MixItems();
    }

    void OnItemClick(ItemStatus item)
    {
        SetItemStatus(item);

        RemoveCompletedItems();

        StateHasChanged();
    }

    void SetItemStatus(ItemStatus item)
    {
        switch (item.Status)
        {
            case 0:
                gameStatusItems.FirstOrDefault(si => si.Id == item.Id).Status = 1;
                break;

            case 1:
                gameStatusItems.FirstOrDefault(si => si.Id == item.Id).Status = 0;
                break;

            default:
                break;
        }
    }

    private void RemoveCompletedItems()
    {
        var selectedItems = gameStatusItems.Where(s => s.Status == 1).ToList();

        if (selectedItems.Count < 1) return; 

        var firstGroupId = selectedItems.FirstOrDefault().Group.Id;

        var itemsInSelectedGroup = gameStatusItems.Where(s => s.Group.Id == firstGroupId).ToList();
        
        if ( (itemsInSelectedGroup.All(isg => isg.Status == 1)) && 
             (selectedItems.All(si => si.Group.Id == firstGroupId)) )
        {
            foreach (var item in selectedItems)
            {
                item.Status = 2;
            }
        }
    }

    private void MixItems()
    {
        gameStatusItemsMixed = gameStatusItems.OrderBy(a => random.Next()).ToList();
    }
}