@page "/current-game/{id:long}"
@page "/current-game";
@using System.Text
@using EntitySystem.Client.Domain.Data.Condition
@using Matcher.Client.Services;
@using EntitySystem.Client.Services;
@using EntitySystem.Shared.Query
@using Matcher.Shared.Domain
@using Matcher.Shared.Models
@using Group = Matcher.Shared.Domain.Group

@inject GameService GameService;
@inject GroupService GroupService;
@inject ItemService ItemService;
@inject IRedirectService RedirectService;
@inject IAlertService AlertService;


@if (_game != null)
{
    <PageTitle>@_game!.Name</PageTitle>

    <h1>@_game!.Name</h1>

    @if (!_gameStarted)
    {
        <div class="col-auto">
            <button class="btn btn-success" disabled="@_startDisabled" @onclick="OnStartGameClick">Start game</button>
        </div>

        <label>Maximum number of Groups: </label>
        <select @bind="@_maxGroups" id="source-language">

            @for (var i = 2; i <= _groups?.Count; i++)
            {
                <option value=@i>@i</option>
            }
        </select>
        <br/><br/>

        @if (_groups != null)
        {
            <span><input type="checkbox" @bind="@_selectAll" @onclick="@SelectAll"> Select All</span>
            <br/><br/>

            @foreach (var group in _groups)
            {
                <span>
                    <input type="checkbox" @bind="group.Checked">&nbsp;&nbsp;&nbsp;&nbsp;
                    @foreach (var item in _gameItems.Where(i => i.Group.Id == group.Id))
                    {
                        <span> @item.Value</span>
                        if (item.Id != _gameItems.LastOrDefault(i => i.Group.Id == group.Id).Id)
                        {
                            <span> | </span>
                        }
                    }
                    <br />
                </span>
            }
        }
        <br />
        <br />
    }

    else
    {
        <br/>
        <div align="right" class="col-auto">
            <button class="btn btn-success" @onclick="OnRestartGameClick">Restart game</button>
        </div>
        <br/>

        <i>Click on items belonging together:</i>
        
        <br/><br/>

        @* render unmatched items*@
        
        @foreach (var item in _gameStatusItems.Where(gsi => gsi.RoundNo ==_currentRound))
        {
            switch (item.State)
            {
                case 0:
                    ButtonClass = "btn btn-secondary";
                    break;
                case 1:
                    ButtonClass = "btn btn-primary";
                    break;
                case 2:
                    ButtonClass = "btn btn-success";
                    continue;
            }

            @if (@_game.Chemical == true)
            {
                <button style="margin: 5px;" class="@ButtonClass" id="@item.Item.Id" @onclick="() => OnItemClick(item)">@((MarkupString)AddSubscript(item.Item.Value))</button>
            }
            else
            {
                <button style="margin: 5px;" class="@ButtonClass" id="@item.Item.Id" @onclick="() => OnItemClick(item)">@item.Item.Value</button>
            }
        }

        @* render matched items per group *@
        _previousGroupId = 0;
    
        var items = SortItemsByGroup(_gameStatusItems);
        
        @foreach(var item in items)
        {
            @if (_previousGroupId != item.Item.Group.Id && item.State == 2)
            {
                <br/><hr/>
            }

            @if (item.State == 2)
            {
                @if (@_game.Chemical == true)
                {
                    <button style="margin:5px;" class="btn btn-success" id="@item.Item.Id">@((MarkupString)AddSubscript(item.Item.Value))</button>
                }
                else 
                {
                    <button style="margin:5px;" class="btn btn-success" id="@item.Item.Id">@item.Item.Value</button>
                }
            }
            _previousGroupId = item.Item.Group.Id;
        }
    }
}

@code
{
    [Parameter]
    public long Id { get; set; }

    private int _currentRound =1;

    private bool _selectAll = true;

    private bool _gameStarted;

    private bool _startDisabled = true;

    private int _maxGroups = 5;

    private DateTime _startTime;

    private long _previousGroupId;

    private static readonly Random Random = new Random();

    private List<Item> _gameItems = new();

    private List<ItemStatusModel> _gameStatusItems = new();
    
    private string ButtonClass { get; set; }

    private Game _game = Index.CurrentGame;

    private List<Group> _groups;

    protected override async Task OnInitializedAsync()
    {
        _game ??= (await GameService.ListAsync(g => g.Id == Id)).SingleOrDefault();
    
        var guid = await ItemService.QueryAsync();

        var query = new Query
        {
            Take = ImportGame.MaxItemsInOneGroup * ImportGame.MaxGroups,
            Conditions = new List<QueryCondition> {DataCondition<Item>.Query(guid, i => i.Group.Game.Id == _game.Id)}
        };

        _gameItems = (await ItemService.ListAsync(guid, query)).Page;
        
        _groups = await GroupService.ListAsync(g => g.Game.Id == _game.Id);

        _groups.ForEach(g => g.Checked = true);

        _startDisabled = false;
    }
    
    private void InitializeNewGame()
    {
        var groups = MixItems<Group>(_groups);

        var rounds = _groups.Count / _maxGroups;

        if (_groups.Count % _maxGroups > 0) rounds++;
        
        var items = _gameItems.Where(i => groups.Any(g => g.Id == i.Group.Id)).ToList();

        _gameStatusItems.Clear();

        var groupIndex = 1;
        var round = 1;
        foreach (var group in groups.Where(g => g.Checked == true))
        {
            foreach (var item in items.Where(i=> i.Group.Id == group.Id))
            {
                var itemStatus = new ItemStatusModel
                {
                    Item = item,
                    State = 0,
                    RoundNo = round
                };

                _gameStatusItems.Add(itemStatus);
            }
            
            if (groupIndex % _maxGroups == 0) round++;

            groupIndex++;
        }


        _gameStatusItems = MixItems<ItemStatusModel>(_gameStatusItems);

        _startTime = DateTime.Now;
    }


    private void OnStartGameClick()
    {
        _gameStarted = true;

        InitializeNewGame();

        StateHasChanged();
    }

    private void OnRestartGameClick()
    {
        _gameStatusItems.ForEach(i => i.State = 0);

        _currentRound = 1;

        _startTime = DateTime.Now;

        InitializeNewGame();

        StateHasChanged();
    }
    
    private void OnItemClick(ItemStatusModel item)
    {
        SetItemStatus(item);

        RemoveCompletedItems();

        StateHasChanged();
    }

    private List<ItemStatusModel> SortItemsByGroup( List<ItemStatusModel> items)
    {
        items = items.OrderBy(i => i.Item.Id).ToList();
        return items.OrderBy(i => i.Item.Group.Id).ToList();
    }

    void SetItemStatus(ItemStatusModel item)
    {
        switch (item.State)
        {
            case 0:
                _gameStatusItems.FirstOrDefault(si => si.Item.Id == item.Item.Id)!.State = 1;
                break;

            case 1:
                _gameStatusItems.FirstOrDefault(si => si.Item.Id == item.Item.Id)!.State = 0;
                break;
        }
    }

    private void RemoveCompletedItems()
    {
        var selectedItems = _gameStatusItems.Where(s => s.State == 1).ToList();

        if (selectedItems.Count < 1) return; 

        var firstGroupId = selectedItems.FirstOrDefault()!.Item.Group.Id;

        var itemsInSelectedGroup = _gameStatusItems.Where(s => s.Item.Group.Id == firstGroupId).ToList();

        if ((itemsInSelectedGroup.Any(isg => isg.State != 1)) || (selectedItems.Any(si => si.Item.Group.Id != firstGroupId))) return;

        foreach (var item in selectedItems)
        {
            item.State = 2;
        }


        if (IsRoundFinished(_currentRound)) _currentRound++;
        
        var gameTime = (DateTime.Now - _startTime);

        var timeFormat = gameTime.TotalSeconds < 60 ? gameTime.ToString(@"s\.fff\s") :  gameTime.ToString(@"m\m\i\n\ ss\.fff\s");

        if (IsGameOver()) AlertService.Add(AlertType.Success, $"Game finished in {timeFormat}");

    }

    private static List<T> MixItems<T>(IEnumerable<T> items)
    {
        return items.OrderBy(i => Random.Next()).ToList();
    }

    private static List<T> ReduceNumberOfItems<T>(IEnumerable<T> items, int count)
    {
        var result = items.Take(count).ToList();
        return result;
    }
    
    private bool IsGameOver()
    {
        return _gameStatusItems.All(s => s.State == 2);
    }

    private bool IsRoundFinished(int round)
    {
        return _gameStatusItems.Where(gsi=>gsi.RoundNo==round).All(s => s.State == 2);
    }
    
    public string AddSubscript(string value)
    {
        var characters = value.ToCharArray();

        StringBuilder result = new();

        foreach (var s in characters)
        {
            if (Char.IsDigit(s))
            {
                var str = $"<sub>{s}</sub>";
                result.Append(str);
            }
            else
            {
                result.Append(s);
            }
        }
        return result.ToString();
      }

    private void SelectAll()
    {
        if (_selectAll)
        {
            _groups.ForEach(g => g.Checked = false);
        }
        else
        {
            _groups.ForEach(g => g.Checked = true);
        }

        StateHasChanged();
    }
}