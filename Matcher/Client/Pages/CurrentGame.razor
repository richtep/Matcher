@page "/current-game";
@using Matcher.Client.Services;
@using EntitySystem.Client.Services;
@using Matcher.Shared.Domain
@using Matcher.Shared.Models
@using System.Text.RegularExpressions;

@inject GroupService _groupService;
@inject ItemService _itemService;
@inject IRedirectService _redirectService;
@inject IAlertService _alertService;


@if (_game == null)
{
    _redirectService.RedirectToAsync("/");
}
else
{
    <PageTitle>Matcher</PageTitle>

    <h1>@_game!.Name</h1>
    
    @foreach (var item in _gameStatusItemsMixed)
    {
        switch (item.Status)
        {
            case 0:
                ButtonClass = "btn btn-secondary";
                break;

            case 1:
                ButtonClass = "btn btn-primary";
                break;

            case 2:
                ButtonClass = "btn btn-success";
                continue;
        }
        @*<button style="margin: 5px;" class="@ButtonClass" id="@item.Id" @onclick="() => OnItemClick(item)"><span>@AddSubsript(item.Value)</span></button>*@


        <button style="margin: 5px;" class="@ButtonClass" id="@item.Id" @onclick="() => OnItemClick(item)"><span>H<sub>2</sub>SO<sub>4</sub></span></button>
    }
    
    {_previousGroupId = 0;}
    @foreach(var item in _gameStatusItems)
    {
        if (_previousGroupId != item.Group.Id && item.Status == 2)
        {
        <br/><hr/>
        }

        @if (item.Status == 2)
        {
        <button style="margin:5px;" class="btn btn-success" id="@item.Id">@item.Value</button>
        }
        _previousGroupId = item.Group.Id;
    }
}


@code
{
    private DateTime _startTime;

    private long _previousGroupId;

    private static readonly Random Random = new Random();

    private List<Item> _gameItems = new();

    private readonly List<ItemStatusModel> _gameStatusItems = new();

    private List<ItemStatusModel> _gameStatusItemsMixed = new();

    private string ButtonClass { get; set; }

    private readonly Game _game = Index.CurrentGame;

    protected override async Task OnParametersSetAsync()
    {
        if (_game!=null) _gameItems = await _itemService.ListAsync(i => i.Group.Game.Id == _game.Id);

        foreach (var item in _gameItems) 
        {
            var itemStatus = new ItemStatusModel
                {
                    Id = item.Id,
                    Group = item.Group,
                    Value = item.Value,
                    Status = 0
                };

            _gameStatusItems.Add(itemStatus);
        }

        MixItems();

        _startTime = DateTime.Now;
    }

    void OnItemClick(ItemStatusModel item)
    {
        SetItemStatus(item);

        RemoveCompletedItems();

        StateHasChanged();
    }

    void SetItemStatus(ItemStatusModel item)
    {
        switch (item.Status)
        {
            case 0:
                _gameStatusItems.FirstOrDefault(si => si.Id == item.Id)!.Status = 1;
                break;

            case 1:
                _gameStatusItems.FirstOrDefault(si => si.Id == item.Id)!.Status = 0;
                break;
        }
    }

    private void RemoveCompletedItems()
    {
        var selectedItems = _gameStatusItems.Where(s => s.Status == 1).ToList();

        if (selectedItems.Count < 1) return; 

        var firstGroupId = selectedItems.FirstOrDefault()!.Group.Id;

        var itemsInSelectedGroup = _gameStatusItems.Where(s => s.Group.Id == firstGroupId).ToList();

        if ((itemsInSelectedGroup.Any(isg => isg.Status != 1)) || (selectedItems.Any(si => si.Group.Id != firstGroupId))) return;

        foreach (var item in selectedItems)
        {
            item.Status = 2;
        }

        if (IsGameOver()) _alertService.Add(AlertType.Success, $"Game finished in {((DateTime.Now-_startTime).TotalMilliseconds)/1000} s");
    }

    private void MixItems()
    {
        _gameStatusItemsMixed = _gameStatusItems.OrderBy(i => Random.Next()).ToList();
    }

    private bool IsGameOver()
    {
        return _gameStatusItems.All(s => s.Status == 2);
    }

    private static readonly Regex _regex = new Regex(@"^([a-zA-Z]+)([0-9]+)([a-zA-Z]+)([0-9]+)$", RegexOptions.Compiled);

    public static string AddSubsript(string value)
    {
        var test = _regex.Replace(value, "$1<sub>$2</sub>$3<sub>$4</sub>");

        return test;
    }

}