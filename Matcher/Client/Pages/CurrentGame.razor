@page "/current-game";
@using Matcher.Client.Services;
@using EntitySystem.Client.Services;
@using Matcher.Shared.Domain
@using Matcher.Shared.Models

@inject GroupService _groupService;
@inject ItemService _itemService;
@inject IRedirectService _redirectService;

<PageTitle>Matcher</PageTitle>

<h1>@_game.Name</h1>


@{_previousGroupId=0;}

@foreach (var item in _gameStatusItems) 
{
    if (_previousGroupId != item.Group.Id && _previousGroupId != 0 && item.Status == 2) 
    {
        <br /><hr/>
    }

    if (item.Status == 2) 
    {
        <button style="margin:5px;" class="btn btn-success" id=@item.Id>@item.Value</button>
    }

    _previousGroupId = item.Group.Id;
}

<hr />
@foreach (var item in _gameStatusItemsMixed)
    {
        switch (item.Status)
            {
                case 0:
                    ButtonClass = "btn btn-secondary";
                    break;

                case 1:
                    ButtonClass = "btn btn-primary"; 
                    break;

                case 2:
                    ButtonClass = "btn btn-success";
                    continue;
                
                default:
                    break;
            }

        <button style="margin:5px;" class="@ButtonClass" id=@item.Id @onclick="() => OnItemClick(item)">@item.Value</button>
    }


@code
{
    private long _previousGroupId;

    private static readonly Random Random = new Random();
    
    private List<Item> _gameItems = new();

    private readonly List<ItemStatus> _gameStatusItems = new();

    private List<ItemStatus> _gameStatusItemsMixed = new();

    private string ButtonClass { get; set; }

    private readonly Game _game = Index.CurrentGame;

    protected override async Task OnParametersSetAsync()
    {
        _gameItems = await _itemService.ListAsync(i => i.Group.Game.Id == _game.Id);

        foreach (var item in _gameItems) 
        {
            var itemStatus = new ItemStatus
                {
                    Id = item.Id,
                    Group = item.Group,
                    Value = item.Value,
                    Status = 0
                };

            _gameStatusItems.Add(itemStatus);
        }

        MixItems();
    }

    void OnItemClick(ItemStatus item)
    {
        SetItemStatus(item);

        RemoveCompletedItems();

        StateHasChanged();
    }

    void SetItemStatus(ItemStatus item)
    {
        switch (item.Status)
        {
            case 0:
                _gameStatusItems.FirstOrDefault(si => si.Id == item.Id)!.Status = 1;
                break;

            case 1:
                _gameStatusItems.FirstOrDefault(si => si.Id == item.Id)!.Status = 0;
                break;
        }
    }

    private void RemoveCompletedItems()
    {
        var selectedItems = _gameStatusItems.Where(s => s.Status == 1).ToList();

        if (selectedItems.Count < 1) return; 

        var firstGroupId = selectedItems.FirstOrDefault()!.Group.Id;

        var itemsInSelectedGroup = _gameStatusItems.Where(s => s.Group.Id == firstGroupId).ToList();

        if ((itemsInSelectedGroup.Any(isg => isg.Status != 1)) || (selectedItems.Any(si => si.Group.Id != firstGroupId))) return;
        
        foreach (var item in selectedItems)
        {
            item.Status = 2;
        }
    }

    private void MixItems()
    {
        _gameStatusItemsMixed = _gameStatusItems.OrderBy(i => Random.Next()).ToList();
    }
}