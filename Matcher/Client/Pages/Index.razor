@page "/"
@using Matcher.Client.Services;
@using EntitySystem.Client.Services;
@using Matcher.Shared.Domain;

@inject GameService _gameService;
@inject FolderService _folderService;
@inject GroupService _groupService;
@inject ItemService _itemService;
@inject UserService _userService;
@inject IRedirectService _redirectService;
@inject IAlertService _alertService;

<PageTitle>Game list</PageTitle>

<div class="mb-3">
    <label class="form-label"><b>@_currentFolderPath</b></label>
</div>

<div class="mb-3">
    <button @onclick="@GoUpperFolder" > &lt;&lt;&lt; </button>
    &nbsp;&nbsp;&nbsp;
    
    @if (_currentFolder is not null)
    {
        @foreach (var folder in _folders.Where(f => f.ParentFolder?.Id == _currentFolder.Id))
        {
            <button @onclick="() => SetCurrentFolderByButton(folder.Id)" >@folder.Name</button>
            <span>&nbsp;</span>
        }
    }
</div>

<h1>Game list</h1>

 @if(_games != null )
 {
    <table class="table table-bordered">
        <tr>
            <th>Name</th>
            <th>Author</th>
        </tr>

         @foreach(var game in _games.Where(g => g.Folder?.Id == _currentFolder.Id))
            {
                <tr @onclick="() => StartGame(game)">
                    <td>@game.Name</td>
                    <td>@game.User.Nick</td>
                </tr>
            }
    </table>
 }


@code
{
    public static Game CurrentGame;

    private List<Game> _games;

    private List<Folder> _folders;

    private Folder _currentFolder;

    private string _currentFolderPath;

    protected override async Task OnParametersSetAsync()
    {
        _games = await _gameService.ListAsync();

        _games = _games.OrderBy(g => g.Name).ToList();

        _folders = await _folderService.ListAsync();

        _currentFolder = _folders.FirstOrDefault(f => f.Name == "Chemie");

        _currentFolderPath = GetFolderPath(_currentFolder);
    }

    private async Task StartGame(Game game) 
    {
        CurrentGame = game;
        await _redirectService.RedirectToAsync($"/current-game/{game.Id}");
    }
    
    
    private void SetCurrentFolderByButton(long folderId)
    {
        _currentFolder = folderId == 0 ? _currentFolder : _folders.FirstOrDefault(f => f.Id == folderId);

        _currentFolderPath = GetFolderPath(_currentFolder);

        StateHasChanged();
    }

    private void GoUpperFolder()
    {

        if (_currentFolder.ParentFolder is null) return;

        _currentFolder = _currentFolder.ParentFolder;

        _currentFolderPath = GetFolderPath(_currentFolder);

        StateHasChanged();
    }

    private static string GetFolderPath(Folder folder)
    {
        var path = folder.Name;

        var parentFolderNames = GetParentFolderNames(folder);

        return parentFolderNames.Aggregate(path, (current, parentFolderName) => parentFolderName + "/" + current);
    }
    private static List<string> GetParentFolderNames(Folder folder)
    {
        List<string> folderNames = new();

        while (folder.ParentFolder is not null)
        {
            folder = folder.ParentFolder;
            folderNames.Add(folder.Name);
        }
        
        return folderNames;
    }
}