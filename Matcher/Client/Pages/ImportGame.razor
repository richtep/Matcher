@page "/service/new"
@using EntitySystem.Client.Services
@using Matcher.Client.Services;
@using Matcher.Shared.Domain
@using Matcher.Shared.Models
@using Microsoft.AspNetCore.Components

@inject IAlertService _alertService;
@inject GameService _gameService;
@inject GroupService _groupService;
@inject ItemService _itemService;
@inject UserService _userService;
@inject IRedirectService _redirectService;

<PageTitle>Create new game</PageTitle>

<h1>New game</h1>

<br/><br/>



<EditForm autocomplete="on" Model="@SignUpModel" OnValidSubmit="@OnSubmit">
                        <DataAnnotationsValidator />
                        <div class="mt-2">
                            <ValidationSummary />
                        </div>
                        
                        <div class="mb-3">
                        <label class="form-label">Import file:  </label>
                        <label class="form-label" style="margin:16px;"> <InputFile OnChange="@LoadLines"/> </label>
                        </div>

                        <div class="mb-3">
                        <label class="form-label" for="card-name">Chemical formulas</label>
                            <input  type="checkbox"  @bind-value="SignUpModel.Chemical"/>
                        </div>

                        <div class="mb-3">
                            <label class="form-label" for="card-name">Name of the game</label>
                            <input class="form-control" type="text" autocomplete="on" id="card-name"
                                   @bind-value="SignUpModel.GameName"/>
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="card-name">Author</label>
                            <input class="form-control" type="text" autocomplete="on" id="card-name"
                                @bind-value="SignUpModel.NickName" />
                        </div>
                        

                        <div class="mb-3">
                            <label class="form-label" for="card-email">Contact email address</label>
                            <input class="form-control" type="email" autocomplete="on"
                                   id="card-email" @bind-value="SignUpModel.Email" />
                        </div>
                        
                        <div class="row gx-2">
                            <div class="mb-3 col-sm-6">
                                <label class="form-label" for="card-password">Password</label>
                                <input class="form-control" type="password" autocomplete="on"
                                    id="card-password"
                                    @bind-value="SignUpModel.Password" />
                            </div>
                            <div class="mb-3 col-sm-6">
                                <label class="form-label" for="card-confirm-password">Confirm
                                    Password</label>
                                <input class="form-control" type="password" autocomplete="on"
                                    id="card-confirm-password"
                                    @bind-value="SignUpModel.Confirm" />
                            </div>
                        </div>
                        
                        
                        <div class="mb-3">
                            <button class="btn btn-primary d-block w-100 mt-3" type="submit"
                                name="submit" disabled="@(!_importFileIsOk)">Create new game</button>
                        </div>
                    </EditForm>


@code 
{
        private const int MaxGroups = 50;
        private const int MaxItems = 10;
        private const int MaxItemCharacters = 30;
        private const char Separator = ',';



    [Parameter]
    public SignUpModel SignUpModel { get; set; } = new();
    
    private string _fileContent;

    private bool _importFileIsOk = false;

    private List<string> _lines = new();


    private async Task LoadLines(InputFileChangeEventArgs e) 
    {
        try
        {
            _fileContent = await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();

            _lines = ParseFileToLines(_fileContent, out var reason);

            if (_lines is null) _alertService.Add(AlertType.Error, $"Import file is wrong, because {reason}");
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task OnSubmit()
    {
        try
        {
            if (_lines is null)
            {
                _alertService.Add(AlertType.Error, "Import file is wrong.");
                return;
            }
            
            var game =  (await _gameService.ListAsync(g => g.Name == SignUpModel.GameName )).FirstOrDefault();
            
            if (game is not null)
            {
                _alertService.Add(AlertType.Error, "This name of the game already exists.");
                return;
            }


            var user = (await _userService.ListAsync(u => u.Email == SignUpModel.Email)).FirstOrDefault();

            if (user is null)
            {
                user = new User { Nick = SignUpModel.NickName, Email = SignUpModel.Email};
                user = await _userService.PutAsync(user);
            }

            


            game = new Game { Name = SignUpModel.GameName, User = user, Password = SignUpModel.Password, Chemical=SignUpModel.Chemical};
            game = await _gameService.PutAsync(game);

            foreach (var line in _lines)
            {
                var group = new Group { Game = game };
                group = await _groupService.PutAsync(group);
               
                var items = line.Split(Separator).ToList();

                foreach (var itemCreated in items.Select(item => new Item { Value = item, Group = group }))
                {
                    await _itemService.PutAsync(itemCreated);
                }
            }
        }
        catch (Exception)
        {
            throw;
        }

        await _redirectService.RedirectToAsync("/");

        _alertService.Add(AlertType.Success, "New game was created.");
    }

    private List<string> ParseFileToLines(string content, out string reason)
    {
        _importFileIsOk = false;

        _lines = (_fileContent.Split(new string[] {Environment.NewLine}, StringSplitOptions.None)).ToList();

        _lines = _lines.Where(s => !string.IsNullOrWhiteSpace(s)).Distinct().ToList();

        if (_lines.Count > MaxGroups)
        {
            reason = $"lines count exceeded maximum limit of Groups ({MaxGroups})";
            return null;
        }

        foreach (var items in _lines.Select(line => line.Split(Separator).ToList()))
        {
            if (items.Count is < 2 or > MaxItems)
            {
                reason = $"items count on each row should be between 2 and {MaxItems}";
                return null;
            }

            if (!items.Any(item => item.Length > MaxItemCharacters)) continue;
            reason = $"each item length should not exceed ({MaxItemCharacters})";
            return null;
        }

        reason = "File was successfully parsed to lines.";
        _importFileIsOk = true;
        return _lines;
    }
} 