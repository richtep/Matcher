@page "/service/new"
@using EntitySystem.Client.Services
@using Matcher.Client.Services;
@using Matcher.Shared.Domain
@using Matcher.Shared.Models
@using Microsoft.AspNetCore.Components

@inject IAlertService _alertService;
@inject GameService _gameService;
@inject GroupService _groupService;
@inject ItemService _itemService;
@inject UserService _userService;
@inject FolderService _folderService;

@inject IRedirectService _redirectService;

<PageTitle>Create new game</PageTitle>

<h1>New game</h1>

<br/><br/>

<div class="mb-3">
    <label class="form-label">Current folder: </label>
    <label class="form-label">@_currentFolderPath
        <button @onclick="@DeleteCurrentFolderAsync">Delete current folder</button>
    </label>
                            
</div>

<div class="mb-3">
    <label class="form-label">Select folder name</label>
    
    <button @onclick="@GoUpperFolder"> .. </button>

    <Select @oninput="@SetCurrentFolder">
        @if (_currentFolder is not null)
        {
            <option value="0" checked> - </option>

            @foreach (var folder in _folders.Where(f => f.ParentFolder?.Id == _currentFolder.Id))
            {
                <option value="@folder.Id">@folder.Name</option>
            }
        }
    </Select>
</div>


<div class="mb-3">
    <input class="form-control" type="text" autocomplete="on" @bind-value="_newFolderName"/>
    <button class="btn btn-primary d-block w-100 mt-3" type="button" @onclick="CreateNewFolderAsync">Create new game folder</button>
</div>


<EditForm autocomplete="on" Model="@SignUpModel" OnValidSubmit="@OnSubmit">
                        <DataAnnotationsValidator />
                        <div class="mt-2">
                            <ValidationSummary />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Name of the game
                                <input class="form-control" type="text" autocomplete="on" @bind-value="SignUpModel.GameName"/>
                            </label>
                        </div>
                        
                        
                        <div class="mb-3">
                            <label class="form-label">Import file:  </label>
                            <label class="form-label" style="margin:16px;"> <InputFile OnChange="@LoadLines"/> </label>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Verify that out-of-group items are unique
                                <input type="checkbox" checked @bind-value="SignUpModel.Unique"/>
                            </label>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Chemical formulas
                                <input type="checkbox" @bind-value="SignUpModel.Chemical"/>
                            </label>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Author
                                <input class="form-control" type="text" autocomplete="on" @bind-value="SignUpModel.NickName" />
                            </label>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Contact email address
                                <input class="form-control" type="email" autocomplete="on" @bind-value="SignUpModel.Email" />
                            </label>
                            
                        </div>
                        
                        <div class="row gx-2">
                            <div class="mb-3 col-sm-6">
                                <label class="form-label">Password
                                    <input class="form-control" type="password" autocomplete="on" @bind-value="SignUpModel.Password" />
                                </label>
                            </div>

                            <div class="mb-3 col-sm-6">
                                <label class="form-label">Confirm Password
                                    <input class="form-control" type="password" autocomplete="on" @bind-value="SignUpModel.Confirm" />
                                </label>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <button class="btn btn-primary d-block w-100 mt-3" type="submit" name="submit">Create new game</button>
                        </div>
                    </EditForm>


@code 
{
        public const int MaxGroups = 700;
        public const int MaxItemsInOneGroup = 20;
        private const int MaxItemCharacters = 200;
        private const char Separator = ',';

    [Parameter]
    public SignUpModel SignUpModel { get; set; } = new();

    private string _fileContent;

    private Folder _currentFolder;

    private string _currentFolderPath;

    private bool _importFileIsOk = false;

    private List<string> _lines = new();

    private List<Folder> _folders;

    private List<Game> _games;

    private string _newFolderName;




    protected override async Task OnParametersSetAsync()
    {
        _folders = await _folderService.ListAsync();

        _games = await _gameService.ListAsync();
        
        _currentFolder = _folders.FirstOrDefault(f => f.Name == "root");

        _currentFolderPath = GetFolderPath(_currentFolder);
    }

    private async Task LoadLines(InputFileChangeEventArgs e)
    {
        try
        {
            _fileContent = await new StreamReader(e.File.OpenReadStream()).ReadToEndAsync();

            _lines = ParseFileToLines(_fileContent, out var reason);

            if (_lines is null) _alertService.Add(AlertType.Error, $"Import file is wrong, because {reason}.");
        }
        catch (Exception)
        {
            throw;
        }
    }


    private async Task OnSubmit()
    {
        try
        {
            if (!(await ValidateInputFileAsync())) return;

            var user = (await _userService.ListAsync(u => u.Email == SignUpModel.Email)).FirstOrDefault();

            if (user is null)
            {
                user = new User {Nick = SignUpModel.NickName, Email = SignUpModel.Email};
                user = await _userService.PutAsync(user);
            }

            var game = new Game {Name = SignUpModel.GameName, User = user, Password = SignUpModel.Password, Chemical = SignUpModel.Chemical, Folder = _currentFolder};
            game = await _gameService.PutAsync(game);

            foreach (var line in _lines)
            {
                var group = new Group {Game = game};
                group = await _groupService.PutAsync(group);

                var items = line.Split(Separator).ToList();

                foreach (var itemCreated in items.Select(item => new Item {Value = item, Group = group}))
                {
                    await _itemService.PutAsync(itemCreated);
                }
            }
        }
        catch (Exception)
        {
            throw;
        }

        await _redirectService.RedirectToAsync("/");

        _alertService.Add(AlertType.Success, "New game was created.");
    }

    private async Task<bool> ValidateInputFileAsync()
    {
        if (!_importFileIsOk)
        {
            _alertService.Add(AlertType.Error, "Import file is wrong.");
            return false;
        }

        if (_lines is null)
        {
            _alertService.Add(AlertType.Error, "Import file is wrong.");
            return false;
        }

        var game = (await _gameService.ListAsync(g => g.Name == SignUpModel.GameName)).FirstOrDefault();

        if (game is not null)
        {
            _alertService.Add(AlertType.Error, "This name of the game already exists.");
            return false;
        }

        return true;
    }


    private List<string> ParseFileToLines(string content, out string reason)
    {
        _importFileIsOk = false;

        _lines = (_fileContent.Split(new string[] {Environment.NewLine}, StringSplitOptions.None)).ToList();

        _lines = _lines.Where(s => !string.IsNullOrWhiteSpace(s)).Distinct().ToList();


        if (_lines.Count > MaxGroups)
        {
            reason = $"lines count exceeded maximum limit of Groups ({MaxGroups})";
            return null;
        }

        foreach (var items in _lines.Select(line => line.Split(Separator).ToList()))
        {
            if (items.Count is < 2 or > MaxItemsInOneGroup)
            {
                reason = $"items count on each row should be between 2 and {MaxItemsInOneGroup}";
                return null;
            }

            if (!IsUnique(_lines, out var duplicateValue) && SignUpModel.Unique)
            {
                reason = $"all items outside groups must be unique, item <{duplicateValue}> is not";
                return null;
            }

            if (!items.Any(item => item.Length > MaxItemCharacters)) continue;
            reason = $"each item length should not exceed ({MaxItemCharacters})";
            return null;
        }

        reason = "File was successfully parsed to lines.";
        _importFileIsOk = true;
        return _lines;
    }

    private void SetCurrentFolder(ChangeEventArgs e)
    {
        var folderId = long.Parse(e.Value.ToString());

        _currentFolder = folderId == 0 ? _currentFolder : _folders.FirstOrDefault(f => f.Id == folderId);

        _currentFolderPath = GetFolderPath(_currentFolder);

        StateHasChanged();
    }

    private async Task DeleteCurrentFolderAsync()
    {
        var folderToBeDeleted = _currentFolder;

        if (_currentFolder.ParentFolder is null)
        {
            _alertService.Add(AlertType.Error, "Root folder cannot be deleted.");
            return;
        }
        
        if (FolderIsEmpty(folderToBeDeleted))
        {
            _currentFolder = _currentFolder.ParentFolder;

            await _folderService.DeleteAsync(folderToBeDeleted);
            
            _alertService.Add(AlertType.Success, $"Folder '{folderToBeDeleted.Name}' was deleted.");

            _currentFolderPath = GetFolderPath(_currentFolder);

            _folders = await _folderService.ListAsync();

            StateHasChanged();
        }
        else
        {
            _alertService.Add(AlertType.Error, "Folder is not empty.");
        }
    }

    private bool FolderIsEmpty(Folder folder)
    {
        var gamesInFolderExist = _games.Any(g => g.Folder?.Id == folder.Id);

        var subFoldersInFolderExist = _folders.Any(f => f.ParentFolder?.Id == folder.Id);

        return !subFoldersInFolderExist && !gamesInFolderExist;
    }

    private void GoUpperFolder()
    {
        _currentFolder = _currentFolder.ParentFolder;

        _currentFolderPath = GetFolderPath(_currentFolder);

        StateHasChanged();
    }
    
    private static bool IsUnique(IEnumerable<string> lines, out string duplicateValue)
    {
        duplicateValue = string.Empty;

        var items = new List<Item>();

        var groupId = 0;


        foreach (var line in lines)
        {
            groupId++;

            var group = new Group {Id = groupId, Game = new Game {Name = "GameUnderImport", User = new User {Email = "e"}, Password = "p"}};

            var rawItems = line.Split(Separator).ToList();

            items.AddRange(rawItems.Select(item => new Item {Value = item, Group = group}));
        }

        foreach (var item in from item in items
            let reducedItems = items.Where(i => i.Group.Id != item.Group.Id)
            where reducedItems.Any(i => i.Value == item.Value)
            select item)
        {
            duplicateValue = item.Value;
            return false;
        }
        return true;

    }

    private static string GetFolderPath(Folder folder)
    {
        var path = folder.Name;

        var parentFolderNames = GetParentFolderNames(folder);

        return parentFolderNames.Aggregate(path, (current, parentFolderName) => parentFolderName + "/" + current);
    }


    private static List<string> GetParentFolderNames(Folder folder)
    {
        List<string> folderNames = new();

        while (folder.ParentFolder is not null)
        {
            folder = folder.ParentFolder;
            folderNames.Add(folder.Name);
        }
        
        return folderNames;
    }


    private async Task CreateNewFolderAsync()
    {
        if (_newFolderName is null || _newFolderName == string.Empty)
        {
            _alertService.Add(AlertType.Error,"New folder name is empty.");

            return;
        }

        if (FolderNameIsUnique(_newFolderName))
        {
            var folder = new Folder()
            {
                Name = _newFolderName,
                ParentFolder = _currentFolder
            };

            await _folderService.PutAsync(folder);

            _folders = await _folderService.ListAsync();
            
            folder = _folders.FirstOrDefault(f => f.Name == _newFolderName && Equals(f.ParentFolder, _currentFolder));
            
            _currentFolder = folder;

            _currentFolderPath = GetFolderPath(_currentFolder);
            
            StateHasChanged();

            _alertService.Add(AlertType.Success,$"New folder '{_newFolderName}' was created.");

            _newFolderName = string.Empty;
        }
        else
        {
            _alertService.Add(AlertType.Error, $"Folder name '{_newFolderName}' already exists.");
        }
    }

    private bool FolderNameIsUnique(string name)
    {
        return _folders.Where(f => f.ParentFolder?.Id == _currentFolder.Id).All(sf => sf.Name != _newFolderName);
    }
}